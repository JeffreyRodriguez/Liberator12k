ifndef MAKEFILE_IN
SHELL := bash
.SHELLFLAGS := -eu -o pipefail -c
MAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += --no-builtin-rules
.ONESHELL:
.DELETE_ON_ERROR:
MAKEFILE_IN=true

FRAME_COUNT:=100
FRAMES:=$(shell seq 0 $(FRAME_COUNT))
SLOW_FRAME_COUNT:=300
SLOW_FRAMES:=$(shell seq 0 $(SLOW_FRAME_COUNT))
MDBIN:=cmark-gfm -e table --unsafe
OSBIN:=nice openscad
OSOPTS:=--hardwarnings --check-parameters=true --check-parameter-ranges=true --colorscheme=Nature --quiet
OS_RES_LOW:=1920,1080
OS_RES_HIGH:=4096,2160
OS_CAM_STL:=--autocenter --viewall --view scales
OS_CAM_ASSEMBLY:=--camera=200,1200,200,50,0,0
GIT_VERSION:=$(shell git describe --always)
GIT_DATE:=$(shell git log -1 --date=format:"%Y-%m-%d" --format="%ad")
DATE:=$(shell date +'%Y-%m-%d')
SUBDIRS:= $(filter-out Liberator12k-source/,$(dir $(wildcard */Makefile)))
SCADS:= $(wildcard *.scad)

ASSEMBLY_DIR:=.assembly
ANIMATIONS_DIR:=.animations
EXPORT_DIR:=.export
VIEWS_DIR:=.views
BUILD_DIR:=.build

# Utility vars for subst
comma:= ,
empty:=
space:= $(empty) $(empty)
define \n


endef

.DEFAULT_GOAL:= all
.PHONY: FORCE $(SUBDIRS) clean clean-dir
.PRECIOUS: .frames/%.mp4 %.png

$(SUBDIRS): FORCE
	$(MAKE) -C $@

# OpenSCAD helpers
list_renders      = $(shell grep -oP '_RENDER +== +"(.+)"' '$(strip $(1))' | cut -d \" -f 2 | sort)
filter_renders    = $(filter $(2),$(call list_renders,$(1)))
list_prints       = $(call filter_renders,$(1),Prints/%)
list_hardware     = $(call filter_renders,$(1),Hardware/%)
list_fixtures     = $(call filter_renders,$(1),Fixtures/%)
list_projections  = $(call filter_renders,$(1),Projections/%)
list_views        = $(basename $(notdir $(wildcard $(basename $(1))/*.view)))
list_presets      = $(shell jq --raw-output '.parameterSets|keys[]'  $(basename $(1)).json | grep -v default)
list_presets_views = $(foreach PRESET,$(call list_presets,$(1)),\
                      $(subst src/,$(VIEWS_DIR)/,\
                        $(addsuffix .png,\
                          $(addprefix $(basename $(1))_$(PRESET)/,\
                            $(call list_views,$(1))))))

# Filename-to-render Conventions:
# .[dir]/Class_Preset.[ext]
# .[dir]/Class_Preset/Prints/Part.[ext]
# .[dir]/Class_Preset/Projections/Part.[ext]
render_name         = $(subst ${space},_,$(filter-out .%,$(subst _, , $(basename $(1)))))
render_name         = $(patsubst .%/,,$(basename $(1)))
render_name         = $(subst $(VIEWS_DIR)/,,$(subst $(EXPORT_DIR)/,,$(subst $(ASSEMBLY_DIR)/,,$(basename $(1)))))
render_class_preset = $(firstword $(subst /, ,$(call render_name,$(1))))
render_class        = $(shell echo $(call render_class_preset,$(1)) | awk -F _ '{ print $$1 }')
render_preset       = $(shell echo $(call render_class_preset,$(1)) | awk -F _ '{ print $$2 }')
render_part         = $(subst $(call render_class_preset,$(1))/,,$(call render_name,$(1)))
render_source       = $(addsuffix .scad, $(call render_class,$(1)))

# Extract the class name from a preset
# i.e. TopBreak_CAFE12+ = TopBreak
preset_class_name = $(shell echo $(1) | awk -F _ '{ print $$1 }')

# Extract the // POV entry
scad_pov          = $(shell grep '// POV ' $(1) | awk '{ print $$3 }')

# .parts files lists all the renders in a given .scad file.
$(EXPORT_DIR)/%.parts: %.scad
	mkdir -p $(dir $@) && \
	echo "$(subst ${space},${\n},$(call list_renders,$^))" > $@

# Build Dependency SCAD files, for freshness check
# OpenSCAD can't just dump deps, so render a 1x1 pixel to /dev/null
# with an empty CSG tree so it renders instantly.
$(BUILD_DIR)/%.d: %.scad
	@$(eval NAME=$(notdir $(basename $@)))
	@$(eval SCAD=$(NAME).scad)
	@$(eval SCAD_POV=$(call scad_pov,$(SCAD)))
	rm -f $@ && \
	mkdir -p $(dir $@) && \
	$(OSBIN) $(OSOPTS) -o - --export-format=png -d $@ \
		--csglimit 0 --render --projection=p \
		$(SCAD) >/dev/null && \
	sed -i '1d' $@

clean: FORCE clean-dir
	for DIR in $(SUBDIRS); do \
	  $(MAKE) -C $$DIR clean clean-dir; \
	done
endif
